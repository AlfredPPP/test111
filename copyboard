class TreeWithCheckbox(QMainWindow):
    def __init__(self, data):
        super().__init__()
        self.setWindowTitle("Entities Tree")
        self.checked_ids = set()

        self.tree = QTreeWidget()
        self.tree.setHeaderLabel("Entities")
        self.tree.itemChanged.connect(self.handle_item_changed)

        self.build_tree(data, self.tree.invisibleRootItem())

        layout = QVBoxLayout()
        layout.addWidget(self.tree)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

    def build_tree(self, items, parent_item):
        for item in items:
            tree_item = QTreeWidgetItem(parent_item)
            tree_item.setText(0, item['name'])
            tree_item.setData(0, Qt.UserRole, item['id'])
            tree_item.setFlags(tree_item.flags() | Qt.ItemIsUserCheckable)
            tree_item.setCheckState(0, Qt.Unchecked)

            # 递归构建子树
            self.build_tree(item.get('entities', []), tree_item)

    def handle_item_changed(self, item, column):
        if column != 0:
            return

        state = item.checkState(0)
        item_id = item.data(0, Qt.UserRole)

        # 更新当前项
        if state == Qt.Checked:
            self.checked_ids.add(item_id)
        else:
            self.checked_ids.discard(item_id)

        # 递归更新子节点
        self.update_children_checkstate(item, state)

        print("✅ 当前已勾选 ID：", self.checked_ids)

    def update_children_checkstate(self, item, state):
        for i in range(item.childCount()):
            child = item.child(i)
            child.setCheckState(0, state)
            child_id = child.data(0, Qt.UserRole)

            if state == Qt.Checked:
                self.checked_ids.add(child_id)
            else:
                self.checked_ids.discard(child_id)

            self.update_children_checkstate(child, state)


if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    window = TreeWithCheckbox(sample_data)
    window.resize(600, 400)
    window.show()
    sys.exit(app.exec_())