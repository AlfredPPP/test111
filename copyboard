import sqlite3
import os

class SQLiteHandler:
    def __init__(self, db_path='database.db', schema_file='create_table.sql'):
        self.db_path = db_path
        self.schema_file = schema_file
        self.conn = None
        self.cursor = None
        self._connect()
        self._initialize_database()

    def _connect(self):
        """Establish SQLite connection and create cursor."""
        self.conn = sqlite3.connect(self.db_path)
        self.cursor = self.conn.cursor()

    def _initialize_database(self):
        """Initialize the database from a SQL schema file."""
        if os.path.exists(self.schema_file):
            with open(self.schema_file, 'r', encoding='utf-8') as f:
                sql_script = f.read()
            self.conn.executescript(sql_script)
            self.conn.commit()
        else:
            raise FileNotFoundError(f"Schema file '{self.schema_file}' not found.")

    def query(self, query_str, params=None):
        """Execute a SELECT query and return the results."""
        if params is None:
            params = ()
        self.cursor.execute(query_str, params)
        return self.cursor.fetchall()

    def insert(self, insert_str, params):
        """Execute an INSERT or UPDATE query."""
        self.cursor.execute(insert_str, params)
        self.conn.commit()
        return self.cursor.lastrowid

    def execute(self, sql_str, params=None):
        """Execute arbitrary SQL (non-SELECT)."""
        if params is None:
            params = ()
        self.cursor.execute(sql_str, params)
        self.conn.commit()

    def close(self):
        """Close the connection."""
        if self.conn:
            self.conn.close()
            self.conn = None
            self.cursor = None