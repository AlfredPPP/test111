根据你更新的图片情况，我们需要处理负数的情况（即数据后面有短横的情况）。你可以使用以下更新后的正则表达式来提取数据，包括负数：

```python
import re

line = "你的行数据在这里"  # 替换为你从PDF读取的实际行数据

# 更新的正则表达式，支持负数（数据后带有短横）
pattern = r'(?<!\S)(-?\d*\.\d+|-?\d{1,3}(?:,\d{3})*(?:\.\d+)?)(-)?(?!\S)'

# 使用findall方法提取所有匹配的数字
matches = re.findall(pattern, line)

# 对提取的结果进行处理，将负数和正数的情况分开处理
numbers = []
for match in matches:
    num = match[0] + ('-' if match[2] == '-' else '')
    numbers.append(num)

print(numbers)
```

### 解释
- `-?\d*\.\d+` 和 `-?\d{1,3}(?:,\d{3})*(?:\.\d+)?` 处理可能为负数的数字，其中 `-?` 表示负号是可选的。
- `-` 捕捉行尾的负号，并将其与数字合并。
- 最后，我们遍历匹配的结果 `matches`，根据是否有负号将负数和正数分别处理。

你可以将这个逻辑应用到你的Python脚本中，确保从PDF读取的每一行数据都能被正确解析并提取为一个列表，列表中的每个元素就是一个数字（包括负数）。