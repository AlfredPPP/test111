下面是一份**符合软件工程形式化要求**的**产品需求文档（PRD）**示例，参考了 [Siegfried/cs480/ReqsDoc.pdf](https://home.adelphi.edu/~siegfried/cs480/ReqsDoc.pdf) 的结构和要点，并将**之前“2.业务需求”章节内容**以及**新的 UI 设计思路**融合其中。所有在「2. 业务需求」中提到的功能点都必须实现，UI 方案也在文档中做了规划，以便后续开发能严格对照。

---

# **产品需求文档（PRD）**

## **1. 引言（Introduction）**

### 1.1 编写目的（Purpose）
本文档旨在详细说明“Monthly Tax Provision 差异核对与评论系统”在业务、功能、UI、数据等方面的需求。本系统主要用于**Preparer** 和 **Reviewer** 两种用户角色，对基金（Fund code + As of date）的月度税务（MTP）数据进行自动化校验、差异识别与评论管理，并支持签名、导出等功能。通过此文档，可确保开发团队在实现系统时理解并满足所有业务需求。

### 1.2 项目范围（Scope）
本项目替代旧有的“`mtp.py` + Excel VBA”实现方式，采用 **Python + PySide2 + SQLite** 架构，为内网金融背景下的月度税务核对提供**友好UI**与**可扩展**的数据存储和评论机制。

### 1.3 受众与阅读对象（Intended Audience）
- **业务人员（Preparer/Reviewer）**：财务、税务相关从业者  
- **项目管理/Stakeholders**：了解项目需求和进度  
- **开发/测试人员**：直接对照此文档进行模块化开发与验收  
- **维护/运维团队**：后期进行升级和部署

### 1.4 定义与术语（Definitions, Acronyms, Abbreviations）
- **MTP**：Monthly Tax Provision，月度税务报表  
- **Preparer**：准备人角色  
- **Reviewer**：复核人角色，包括1st reviewer和2nd reviewer  
- **Checkpoint**：特定业务规则的核对点，如“S4 Dividend IP Recon”、“S5 Unbalance Fund”等  
- **ADJ / Adjustment**：手动调整数值  
- **CM/PM/CY/PY**：Current Month、Prior Month、Current Year、Prior Year

### 1.5 引用/参考文档（References）
1. [Siegfried/cs480/ReqsDoc.pdf](https://home.adelphi.edu/~siegfried/cs480/ReqsDoc.pdf) - 标准软件需求文档结构参考  
2. 项目现有旧版脚本 `mtp.py` 及“Fund Calculate.xlsx” 模板  
3. 本项目上下文金融业务规则文档  
4. 本地化或国际化（如英语/中文）需参考的企业财务制度手册  

### 1.6 文档概览（Overview）
后续章节将依次阐述**业务需求**、**系统整体设计**、**功能性与非功能性需求**、**接口约束**、**UI 设计**等，以形成可执行的开发蓝图。

---

## **2. 业务需求（Business Requirements）**

> **说明**：以下为对系统在业务层面的详细阐述，是**必须实现**的核心功能和规范。本段内容完全包含此前讨论并经确认的“2.业务需求”要点。

### 2.1 核心需求概述

#### 2.1.1 术语说明
1. **核查对象**：由 “Fund code + As of date” 唯一标识，系统对比、校验、记录、更新均围绕此对象进行。
2. **时间缩写**：CM（当前月）、PM（上月）、CY（当年）、PY（前年）。
3. **Preparer**：根据原始数据（TIR / CGT-TIR / SWAP / Investment Package / NAV等）计算 MTP 并上传到内部系统的业务角色。
4. **Reviewer**：审阅 Preparer 结果的角色（含1st、2nd），确认或退回差异。
5. **内部系统**：MYRTS、DMH等内网金融系统，用于下载/上传 MTP 报表。
6. **程序**：此项目构建的核对程序。
7. **ADJ / manual adjustment**：出于金融规则或客户需求，在原始数据计算基础上做的额外人工调整。
8. **Checkpoint**：特定业务规则检查点（如“S4 Dividend IP Recon”），对 MTP 与原始文件进行多维度比对。

#### 2.1.2 数据整合与对比
1. **下载 MTP 报表文件**：程序需从内部系统（如 MYRTS）下载某核查对象的 MTP 数据（可含 CM、PM 版本）。
2. **读取原始文件**：支持用户指定本地或局域网路径的 Excel、PDF、SWAP、TIR等文件，包含MTP相关数据。
3. **多维度对比**：根据 checkpoint 规则，对内部系统 MTP 数据与原始文件值比对，生成差异报告（Summary + Detail）。

#### 2.1.3 差异处理与评论
1. **差异报告**：分Summary（checkpoint粒度）与Detail（字段/行粒度）；  
2. **差异处理**：Preparer或Reviewer在Summary添加Notes，在Detail为每条差异添加Comment说明原因；
3. **Sendback机制**：Reviewer可对差异打 `<sendback>` 标记，退回给Preparer补充修改或说明。

#### 2.1.4 上传文件至内部系统
- 对某些特殊checkpoint（如“S4 Dividend IP Recon”）允许用户在差异明细中编辑MTP数值并更新回内部系统。

#### 2.1.5 Checklist文件签名
- 程序内有Checklist标签页，列出核查事项；Preparer/1st Reviewer/2nd Reviewer需签名并可导出Checklist文件到指定位置，亦写入数据库。

#### 2.1.6 多用户登陆与数据储存
1. **并行用户**：允许多个用户同时登录核对不同核查对象；同一对象同一时刻仅一人可编辑。
2. **自动存储**：每次运行后差异与评论存储至数据库；再打开时自动加载最新进度。

#### 2.1.7 自动化处理
1. **差异导出**：支持将Summary/Detail差异导出到本地（xlsx、pdf等）。
2. **缺失/不匹配警告**：文件或行列不全时主动提示。
3. **友好UI**：采用PySide2界面，操作简便。

#### 2.1.8 历史差异统计
- 在主界面展示各核查对象历史差异统计、常见错误点，支持对用户错误情况进行统计。

### 2.2 数据存储需求

#### 2.2.1 用户本地储存
- 储存内部系统的密码（加密）及“运行规则表”副本。

#### 2.2.2 局域网储存：运行记录（SQLite）
1. **字段**：fund_code、as_of_date、checkpoint、internal_value、source_value、preparer_comment、reviewer_comment、update_time、update_user、is_valid；
2. 当仅添加Notes时，可为空checkpoint/internal_value/source_value；
3. 写入数据库时，每条comment附时间与用户标记。

#### 2.2.3 局域网储存：运行规则（SQLite）
- 存储checkpoint与对应file type、rule pattern、comment、update_time等，用于对比逻辑的灵活配置。

#### 2.2.4 局域网储存：Checklist文件
- Checklist表包含(ID, fund_code, as_of_date, file_path, md5, update_time, update_user)，保存签名文件信息。

### 2.3 UI 需求

#### 2.3.1 登录界面
1. 角色选择（Preparer, 1st reviewer, 2nd reviewer）  
2. 选择内部系统平台并输入账号密码，可记住密码；  
3. “skip”按钮可跳过登陆仅查看历史数据。

#### 2.3.2 主界面 - Home
1. 显示历史核查对象的出错情况、用户失误统计。

#### 2.3.3 主界面 - Review Tab
1. 选择核查对象（Fund + As of date）与 checkpoints；  
2. 输入原始文件路径；  
3. “Review”后自动下载 MTP 并对比，显示差异Summary；  
4. 用户在 Summary 中可添加 Notes，或跳转 Detail Tab；  
5. 允许将 Summary + Detail 导出 xlsx。

#### 2.3.4 主界面 - Detail Tab
1. 查看单个checkpoint的明细：内部系统值(a)、原始文件值(b)、manual adjustment(c)、差异(d)、评论等；  
2. 若为“S4 Dividend IP Recon”，可在此编辑MTP值并更新回内部系统；  
3. Reviewer可对差异添加 `<sendback>` 标签。

#### 2.3.5 主界面 - Checklist Tab
1. 展示 checklist 内容；  
2. Preparer/Reviewer可双击签名与日期；  
3. “Save”写数据库并保存在网络位置，“Export”导出签名文件。

---

## **3. 整体系统描述（Overall Description）**

### 3.1 产品背景（Product Perspective）
- 本系统取代旧的 VBA/Excel 宏混合脚本，提供可扩展、可维护的核对工具。  
- 主要与内部系统（MYRTS/DMH）的 API 或下载链接交互，读取 MTP Excel/PDF/TIR/SWAP等文件，存储在SQLite数据库。

### 3.2 系统功能概览（Product Functions）
1. **登录与 Session 管理**  
2. **核查对象选择、MTP 下载**  
3. **原始文件解析**  
4. **多维度差异比对（多 checkpoint）**  
5. **差异展示（Summary + Detail）**  
6. **差异评论与 `<sendback>`**  
7. **S4 Dividend IP Recon 等修改回写**  
8. **Checklist 签名**  
9. **历史数据存储、导出与统计**  

### 3.3 用户类别与特征（User Classes and Characteristics）
- **Preparer**：必须能够编辑差异评论、进行手动调整、处理 `<sendback>`；  
- **Reviewer**：可审阅并二次评论 `<sendback>` 或签名；  
- **只读/Skip**：无需密码，可查看历史记录，不可编辑提交。

### 3.4 操作环境（Operating Environment）
- 系统在企业内网环境运行，采用Python 3.9+、PySide2 GUI、SQLite数据库；  
- 部分功能需访问 MYRTS/DMH 内网地址；  
- 运行平台：Windows 10+ 或类似Windows Server环境。

### 3.5 设计和实现约束（Design and Implementation Constraints）
1. **安全**：内网登录与密码需加密存储；  
2. **性能**：对比运算需适应数万行数据（TIR大表等），UI不卡顿；  
3. **第三方库**：仅可使用经安全审查的 Python/Qt 依赖（pdfplumber, openpyxl, requests 等）。

### 3.6 用户文档（User Documentation）
- 提供**用户操作手册**（描述登录、Review流程、Detail Tab编辑、Checklist签名等）。  
- 提供**视频或图文教学**以减少学习成本。

### 3.7 假设与依赖（Assumptions and Dependencies）
- 假设内部系统具备稳定API或下载地址；  
- 依赖局域网共享路径能正常访问原始文件；  
- 依赖既定数据库结构不会频繁变动。

---

## **4. 系统功能需求（System Features）**

### 4.1 登录模块
1. **功能**：登录界面，输入账号密码并验证；可记住密码；  
2. **输入**：用户名/密码/角色/平台；**输出**：登录成功，跳转主界面；  
3. **错误处理**：密码错误 / 网络异常 / Skip登录；  
4. **优先级**：高。

### 4.2 Review Tab + MTP下载模块
1. **功能**：选择基金 & 日期 & checkpoints → 程序自动从 MYRTS 下载 MTP → 解析本地原始文件 → 进行对比；  
2. **对比结果**：生成 Summary 差异列表；  
3. **Notes**：可对整个Summary做备注；  
4. **优先级**：高。

### 4.3 Detail Tab
1. **功能**：列出指定 checkpoint 明细差异(Internal vs. Source vs. ADJ vs. Diff)；  
2. **评论**：用户可填“Preparer/Reviewer”评论，每条差异可 `<sendback>`；  
3. **S4 Dividend IP Recon**：可编辑数值并更新回内部系统；  
4. **优先级**：高。

### 4.4 Checklist Tab
1. **功能**：按照预定义 checklist 展示；  
2. **签名**：Preparer / 1st Reviewer / 2nd Reviewer 分别签名；  
3. **导出**：签名后写数据库，并可手动导出xslx或pdf。  
4. **优先级**：中。

### 4.5 历史记录与统计
1. **Home**页面可展示历史核查对象的差异数量、用户错误统计；  
2. **Detail**保留过去评论记录（时间+用户）并可导出；  
3. **优先级**：中。

### 4.6 文件解析与异常处理
1. **读取Excel/PDF/Swap**等，若缺关键sheet/行/列则报警；  
2. 提供**logs**记录解析过程；  
3. **优先级**：中。

---

## **5. 外部接口要求（External Interface Requirements）**

### 5.1 用户界面（User Interfaces）
#### 5.1.1 UI 设计原则
- 采用**渐进式披露**：Summary 显示主要差异，Detail 可以折叠/展开评论与计算链；  
- 核心数据在简洁表格显示，计算逻辑可用「悬浮提示(tooltip)」或「展开Panel」；  
- 见下文详细 UI 设计方案。

#### 5.1.2 UI 方案概述
1. **登录界面**：角色选择 + 平台 + 记住密码  
2. **主界面**：Tab 或分栏展示：  
   - HomeTab（统计）  
   - ReviewTab（核查与 Summary）  
   - DetailTab（差异明细 + 评论）  
   - ChecklistTab（签名）

#### 5.1.3 差异展示（Detail Page）美观性提升
- 主表格仅展示**Field / Internal Value / Source Value / ADJ / Difference / Status**；  
- 点击某行或小图标可展开查看**计算逻辑**（引用文件路径、公式）和**评论**（Preparer / Reviewer / sendback）。

### 5.2 硬件接口（Hardware Interfaces）
- 仅普通 PC 终端即可，无特殊硬件需求。

### 5.3 软件接口（Software Interfaces）
- **内部系统下载**：通过 requests/Session 访问 MYRTS 等 URL, 需 SSL；  
- **PDF解析**：pdfplumber；**Excel**：openpyxl 或 xlsxwriter；**SQLite**：内置 Python sqlite3。

### 5.4 通信接口（Communication Interfaces）
- 系统与内部系统通信走内网 HTTPS；  
- UI 层与 SQLite 本地读写无需额外网络接口。

---

## **6. 非功能性需求（Non-functional Requirements）**

### 6.1 性能需求（Performance Requirements）
1. 对比处理**1~2万行**的Excel/PDF/Swap数据需在30秒内完成；  
2. UI 响应在2秒内完成关键操作（进入Detail、保存评论等）。

### 6.2 安全需求（Safety/Security Requirements）
1. 数据库存储需对用户密码加密，评论日志防篡改；  
2. 外部系统连接需 https / sm-auth；  
3. 角色权限：Preparer可编辑自身评论，Reviewer有二次评论和 `<sendback>` 权限。

### 6.3 软件质量属性（Software Quality Attributes）
- **可维护性**：采用模块化架构（MTPDownloader、FileParser、Checker、CommentsManager等）；  
- **可扩展性**：若增加新的文件类型或checkpoint规则，只需更新解析和 compare 逻辑；  
- **可靠性**：差异对比结果必须正确无误，若出现异常则日志记录并给出提示。

### 6.4 其它需求
- **可国际化**：若需多语言可在 PySide2 中切换翻译文件；  
- **可批量操作**：如一次性选多行差异进行相同评论。

---

## **7. 其他需求（Others）**
- **培训与上线**：在正式上线前需对 Preparer/Reviewer 培训使用。

---

## **8. UI 详细原型（附录/示例）**

(可在此附截图或结构示意)

1. **登录**  
   - 用户名 / 密码 / 角色 / 平台下拉 → [登录] / [跳过]  
2. **Home**  
   - 显示历史统计：基金|As of date|差异数|状态|最近更新时间|…  
3. **Review**  
   - [选择基金 + 日期 + checkpoints] → [选择原始文件路径] → [Review按钮]  
   - 显示**Summary**：checkpoint名称|差异数|已评论行|… → 点击某行进入DetailTab  
   - 可添加`Notes`  
4. **Detail**  
   - 顶部：Checkpoint名称、返回Summary / 导出  
   - 表格：Field、Internal、Source、ADJ、Diff、评论状态…  
   - 每行可展开计算公式、评论区 → 右侧/下方显示**comment timeline**  
   - Reviewer可 `<sendback>`  
5. **Checklist**  
   - 显示核查项：某一行 → 状态列 → 用户签名栏  
   - “Save”写库，“Export”导出

---

## **9. 验收标准与阶段（Appendix/Validation）**

1. **功能验收**  
   - 能否成功下载MTP、对比原始文件、生成正确差异；  
   - Preparer能否写comment、Reviewer能否 `<sendback>`；  
   - Checklist签名及导出正常。  

2. **性能测量**  
   - 大规模数据处理时间是否在限定范围内；  
   - UI操作流畅度。

3. **安全与权限**  
   - 密码是否加密存储；  
   - Skip登录是否仅可读；  
   - Reviewer无法编辑Preparer的评论等。

4. **完整覆盖**  
   - “2. 业务需求”中所有点均应实现。

---

## **10. 结束语（Conclusion）**

本 PRD 覆盖了**Monthly Tax Provision 差异核对系统**的核心需求、功能要点、UI 设计建议、性能和安全要求。后续开发团队应据此进行模块划分与任务排期，确保在上线前逐项测试并确认合规；若业务或技术环境发生变化，应及时更新本文档以反映新的需求或限制。

> **备注**：此文档提供了可操作的开发蓝图，后续若有增量 checkpoint 规则或跨系统需求变动，需要在 “2. 业务需求” 和 “4. 系统功能” 中增补相应章节。




下面是一份**合并了 UI/UX 设计、技术需求、数据模型和接口说明**的综合性设计文档示例。鉴于项目规模相对较小，我们将**UI/UX 设计**、**技术需求（TRD）**、**数据模型**以及**接口文档**汇总在同一份文档中，以便在开发阶段能够集中查阅。文档结构可根据需要做适当裁剪或细化。

---

# **综合设计文档（UI/UX + TRD + 数据模型 + 接口）**

## **1. 概述（Overview）**
本文基于前期的 **PRD**（产品需求文档）以及需求讨论成果，进一步详细阐述本项目在**界面设计、技术架构、数据模型与接口**方面的设计方案。该文档将指导后续的开发实施与测试部署。

---

## **2. UI/UX 设计**

### 2.1 设计原则与整体风格

1. **一致性与简洁**  
   - 采用统一的控件样式与布局规范（如同色系、相似组件大小），保证用户在各界面间切换时有一致体验。  
   - 突出核心信息（差异对比、评论），避免不必要的视觉干扰。

2. **金融数据的可读性**  
   - 数字格式化：千分位、对负数加括号、货币或税率等信息明确标注单位；  
   - 提供差异标识（颜色/箭头/符号）以区分增减。

3. **易于操作**  
   - 支持弹窗或侧边栏查看详情与评论，减少页面切换；  
   - 交互按钮（如“导出”、“保存”、“sendback”）尽量放在显著位置。

### 2.2 界面流程（用户体验流程图）

简要描述用户从**登录**到**首页(Home)**再到**Review**、**Detail**、**Checklist**的流程：

```
 ┌─────────────┐
 │   Login     │
 └─────────────┘
        ↓ (成功登录)
 ┌─────────────────┐
 │ Home (统计概览) │
 └─────────────────┘
        ↓ (点击"Review")
 ┌─────────────────────────┐
 │ Review Tab (Summary)    │
 └─────────────────────────┘
        ↓ (选择具体 checkpoint)
 ┌─────────────────────────┐
 │ Detail Tab (差异明细)   │
 └─────────────────────────┘
        ↓ (核对完毕)
 ┌─────────────────────────┐
 │ Checklist Tab (签名)    │
 └─────────────────────────┘
```

### 2.3 主要界面线框图（Wireframe）

> 以下仅以文字+简图方式说明，可在原型工具（Axure、Figma、Sketch等）做更精细的图。

#### 2.3.1 登录界面

- **左侧**：系统标题 / Logo  
- **中间**：  
  - 输入框：用户名，密码  
  - 下拉：角色（Preparer / 1st Reviewer / 2nd Reviewer）  
  - 下拉：系统平台（MYRTS, DMH...）  
  - 复选框：“记住密码”  
  - 登录按钮 & Skip按钮（只读模式）  

#### 2.3.2 Home Tab

- **顶部**：主菜单（Home, Review, Detail, Checklist, 退出）  
- **中心**：历史核查列表  
  - 列：Fund Code, AsOfDate, 差异总数, 最后更新时间, 状态(是否签名完成)等  
- **右下或顶部**：统计图或按钮（“查看常见错误点”）

#### 2.3.3 Review Tab (Summary)

- **头部**：下拉选择 Fund + AsOfDate + 复选Checkpoint列表 + “Review”按钮  
- **主体**：Summary表格  
  - 列：Checkpoint名称、差异数量、已评论数量、sendback标记数量  
  - 点击某checkpoint → Detail Tab  
- **备注(Notes)输入框**：可在Summary底部或右侧

#### 2.3.4 Detail Tab (单个Checkpoint差异明细)

- **表格**：  
  - 行：每个业务字段/条目  
  - 列：Field, InternalValue, SourceValue, ManualADJ, Diff, Status/Comment  
  - *可加合计/小计行*  
- **评论区**：用户点击某行可展开侧边面板  
  - 展示计算逻辑（如PDF第x页第y行 + Excel第z行…）  
  - 展示全部对话评论(Preparer、Reviewer、timestamp)，可新增  
  - Reviewer可 `<sendback>`  
- **S4 Dividend IP Recon场景**：允许在InternalValue列编辑并回传  

#### 2.3.5 Checklist Tab

- **中间**：Checklist项目表  
  - 行：核对项名称、状态勾选、签名区  
- **下方**：按钮  
  - “Save”→ 写入数据库 & 生成网络路径  
  - “Export”→ 输出 xlsx / pdf  
- **签名**：可双击对应单元格自动填用户名+日期

---

## **3. 技术需求（TRD）**

### 3.1 技术选型

1. **编程语言**：Python 3.9+  
2. **GUI 框架**：PySide2 (Qt for Python)  
3. **数据库**：SQLite 3 (内置)  
4. **文件解析**：  
   - `openpyxl` or `xlsxwriter` (Excel)  
   - `pdfplumber` (PDF)  
   - `csv`/`pandas` (CSV/SWAP)  
   - `requests` (下载 MTP)  
5. **日志**：使用 `logging` 库记录系统操作与错误

### 3.2 系统架构与主要模块

1. **UI 层**（PySide2 界面模块）
   - LoginWindow  
   - MainWindow (内含 HomeTab, ReviewTab, DetailTab, ChecklistTab)

2. **业务逻辑层**  
   - **MTPDownloader**：从 MYRTS/DMH 下载 MTP  
   - **FileParser**：解析 Excel/PDF/Swap/TIR  
   - **Checker**：对比内部系统 vs. 原始文件  
   - **CommentsManager**：管理差异评论与 `<sendback>`  
   - **ChecklistManager**：管理Checklist签名、导出

3. **数据访问层（DAL）**  
   - **DatabaseHelper**：统一SQLite操作  
   - **Model**：数据实体(Record, ChecklistRecord, RunRule等)

4. **工具层**（Utility）  
   - **SessionManager**：存储登录Session  
   - **ConfigLoader**：读取运行规则表  
   - **Logging**：写日志

#### 3.2.1 流程简要

1. 用户登录→SessionManager保留登录信息  
2. 选择Review→MTPDownloader拉取MTP & FileParser解析→Checker比对→生成Summary  
3. 用户点击差异行→DetailTab→CommentsManager加载或保存评论

### 3.3 关键功能及实现

1. **差异比对**  
   - `Checker.compare(internal_data, source_data, checkpoint_rule)`  
   - 返回差异列表(字段名, InternalVal, SourceVal, Diff, ManualADJ, Status)

2. **更新回写**  
   - `Checker.update_internal_system(fund_code, as_of_date, new_value_list)`：针对S4 Recon提交

3. **多用户并行**  
   - 以**数据库锁**或**程序内会话**限制同一（fund_code+as_of_date）被同时编辑。

4. **报错与异常**  
   - 缺失文件 / sheet / 列时，抛出异常并在UI给出警告

---

## **4. 数据模型文档**

### 4.1 数据库结构（SQLite 表示）

#### 4.1.1 表：`run_records`
```sql
CREATE TABLE run_records (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  fund_code TEXT NOT NULL,
  as_of_date TEXT NOT NULL,
  checkpoint TEXT,
  internal_value REAL,
  source_value REAL,
  preparer_comment TEXT,
  reviewer_comment TEXT,
  update_time DATETIME,
  update_user TEXT,
  is_valid INTEGER DEFAULT 1
);
```
- 用于存储每次核对的差异结果与评论。  
- **checkpoint** 可为空表示是notes。

#### 4.1.2 表：`run_rules`
```sql
CREATE TABLE run_rules (
  checkpoint TEXT NOT NULL,
  file_type TEXT,
  rule_pattern TEXT,
  comment TEXT,
  update_time DATETIME,
  update_user TEXT,
  is_valid INTEGER DEFAULT 1
);
```
- 存储checkpoint的相关匹配规则、文件类型等。

#### 4.1.3 表：`checklist_records`
```sql
CREATE TABLE checklist_records (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  fund_code TEXT NOT NULL,
  as_of_date TEXT NOT NULL,
  file_path TEXT,
  md5 TEXT,
  update_time DATETIME,
  update_user TEXT
);
```
- 保存Checklist文件签名、MD5值等信息。

#### 4.1.4 （可选）表：`user_credentials`
```sql
CREATE TABLE user_credentials (
  user_id TEXT PRIMARY KEY,
  password_enc TEXT,
  role TEXT,
  last_login DATETIME
);
```
- 若需要存储加密密码或角色信息。

### 4.2 关系图
```
fund_code, as_of_date -> run_records, checklist_records, ...
checklist_records -> (md5, file_path)
run_rules -> checkpoint
```
- 不存在特别复杂的外键依赖，大部分基于 (fund_code, as_of_date) 逻辑关联。

---

## **5. 接口文档**

### 5.1 内部接口（Python函数调用）

1. **MTPDownloader**  
   - `fetch_mtp_report(fund_code: str, as_of_date: str, report_version: str) -> str`  
     - 下载 MTP 文件并返回本地路径

2. **FileParser**  
   - `parse_excel(file_path: str) -> Dict[str, float]`  
   - `parse_pdf(file_path: str) -> Dict[str, float]`  
   - …  
   - 返回各字段的数值映射。

3. **Checker**  
   - `compare(internal_values: Dict[str, float], source_values: Dict[str, float], rules: Any) -> List[DiffResult]`  
     - 生成差异列表

4. **CommentsManager**  
   - `save_comment(record_id: int, comment: str, user: str, role: str)`  
   - `get_comments(record_id: int) -> List[Comment]`

5. **ChecklistManager**  
   - `sign_checklist(fund_code: str, as_of_date: str, role: str, user: str) -> None`  
   - `export_checklist(fund_code: str, as_of_date: str) -> str`

### 5.2 UI 调用约定

1. **ReviewTab**  
   - 当点击“Review”后 → 调用 `MTPDownloader.fetch_mtp_report` + `FileParser.parse_xxx` + `Checker.compare` → 返回差异 → UI 显示 Summary  
2. **DetailTab**  
   - 选中某checkpoint → 加载对应差异 → 显示在表格 → OnRowSelect:显示评论区  
   - 提交评论 → 调用 `CommentsManager.save_comment`  
   - 更新回写 → 调用 `Checker.update_internal_system`

### 5.3 第三方接口
- **MYRTS/DMH**：  
  - 以HTTPS下载MTP文件，可能需要`requests.Session`和cookie。  
  - 具体URL或token由内部IT提供。

---

## **6. 安全与权限**

1. **密码加密**  
   - 使用AES或其他对称加密存储在 user_credentials 表，或在 Windows Credential Manager 中存储；  
2. **角色区分**  
   - Preparer可编辑数据与评论；Reviewer可追加评论和 `<sendback>`；  
   - Skip/只读模式下不可提交任何数据。  
3. **内网环境**  
   - 不对互联网开放，无额外防火墙配置需求。

---

## **7. 部署与环境**

1. **Python 环境**  
   - Python 3.9+，安装 PySide2、requests、pdfplumber、openpyxl、sqlalchemy（可选）等。  
2. **数据库**  
   - 默认在同目录下的 SQLite 文件，也可放在共享网络盘便于多用户访问。  
3. **更新**  
   - 每次发新版仅需更新 exe 或 py scripts + Qt资源，不影响数据库已有数据。

---

## **8. 测试与验收**

1. **功能测试**  
   - 测试用例：  
     - 登录成功/失败，记住密码  
     - 下载 MTP -> Summary -> Detail -> 提交评论 -> sendback  
     - S4 Recon 更新回写  
     - Checklist 签名导出  
2. **性能测试**  
   - 大文件解析速度  
   - 并发用户在不同 Fund + AsOfDate 下工作  
3. **回归测试**  
   - 版本迭代后确保差异记录与评论正确保留。

---

## **9. 结束（Conclusion）**

此文档囊括了 **UI/UX 设计**、**技术需求（TRD）**、**数据模型说明**以及**接口定义**。后续开发团队可对照本设计文档与 PRD，在实现阶段分工开发各功能模块，并在联调/测试时确保业务流程与 UI 界面符合预期。如果业务规则或内部系统接口有变动，应在该文档相应章节做修订。

**——完——**
