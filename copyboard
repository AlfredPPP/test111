import aiohttp
import asyncio
import aiofiles
import os


class MyRTSHandler:
    def __init__(self):
        self.session = None
        self.is_signed = False

    async def login(self, username, password):
        """异步登录方法"""
        self.session = aiohttp.ClientSession()
        login_url = 'https://myrts.com/login'
        login_data = {
            'username': username,
            'password': password
        }
        
        async with self.session.post(login_url, data=login_data) as response:
            # 根据实际登录成功的条件判断
            if response.status == 200:
                self.is_signed = True

    async def close(self):
        """关闭会话"""
        await self.session.close()

    async def _download_file(self, semaphore, url, form_data, file_path):
        """异步下载单个文件"""
        async with semaphore:  # 控制并发量
            for retry in range(2):
                try:
                    async with self.session.post(url, data=form_data) as response:
                        if response.status == 200:
                            content = await response.read()
                            async with aiofiles.open(file_path, 'wb') as f:
                                await f.write(content)
                            return True
                except Exception as e:
                    if retry == 1:
                        print(f"Failed to download {file_path}: {str(e)}")
                    continue
        return False

    async def download_45days_csv(self,
                                export_path='',
                                date='',
                                funds: list = None,
                                concurrency=20):
        """异步批量下载文件"""
        if not funds:
            return

        url = 'https://myrts.com/export'
        semaphore = asyncio.Semaphore(concurrency)  # 控制并发数量
        tasks = []

        # 确保输出目录存在
        os.makedirs(export_path, exist_ok=True)

        for fund in funds:
            if not fund or len(fund) != 4:
                continue

            # 构造表单数据
            form_data_1 = {'__para': f'fundcode={fund}&date={date}', '__request': '603'}
            form_data_2 = {'__para': f'fundcode={fund}&date={date}', '__request': '605'}

            # 创建下载任务
            for form_data, suffix in [(form_data_1, f'Dtl_{fund}.csv'), 
                                   (form_data_2, f'{fund}.csv')]:
                file_path = os.path.join(export_path, suffix)
                task = self._download_file(
                    semaphore=semaphore,
                    url=url,
                    form_data=form_data,
                    file_path=file_path
                )
                tasks.append(task)

        # 批量执行所有任务
        await asyncio.gather(*tasks)


# 使用示例
async def main():
    handler = MyRTSHandler()
    await handler.login('your_username', 'your_password')
    
    # 假设这是你的基金列表
    funds_list = ['0001', '0002', '0003', ...]  # 你的基金代码
    
    await handler.download_45days_csv(
        export_path='./downloads',
        date='2023-01-01',
        funds=funds_list,
        concurrency=20  # 根据服务器承受能力调整
    )
    
    await handler.close()

if __name__ == '__main__':
    asyncio.run(main())
