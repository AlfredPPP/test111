To handle a failed login attempt and allow the user to re-login, we need to ensure that the loading spinner is replaced back with the input boxes if the login fails. Here's how we can adjust the code to support re-login attempts:

### Step 1: Update `index.html` to include an error message

1. **Update `index.html` to include an error message placeholder:**

```html
<!-- src/HiTrustHandler/app/templates/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HiTrust Handler</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
    <script src="https://cdn.jsdelivr.net/npm/vue@2"></script>
</head>
<body>
    <div id="app">
        <div class="background">
            <div class="center-container">
                <div v-if="!loggedIn && !loading" class="login-container">
                    <input type="text" v-model="username" placeholder="Username">
                    <input type="password" v-model="password" placeholder="Password">
                    <button @click="login">Login</button>
                    <p v-if="errorMessage" class="error">{{ errorMessage }}</p>
                </div>
                <div v-if="loading" class="loading-container">
                    <div class="spinner"></div>
                </div>
                <div v-if="loggedIn" class="source-container">
                    <input type="text" v-model="source" placeholder="Source">
                    <button @click="submitSource">Submit</button>
                </div>
            </div>
            <div class="logo-bottom">
                <img src="{{ url_for('static', filename='images/logo2.png') }}" class="logo-bottom" alt="Logo 2">
            </div>
        </div>
    </div>

    <script src="{{ url_for('static', filename='js/app.js') }}"></script>
</body>
</html>
```

### Step 2: Update `styles.css` to style the error message

1. **Update `styles.css` to style the error message:**

```css
/* src/HiTrustHandler/app/static/css/styles.css */
body, html {
    margin: 0;
    padding: 0;
    height: 100%;
    width: 100%;
    font-family: Arial, sans-serif;
    background-color: rgba(230, 230, 255, 1); /* 90% white, 10% blue */
}

.background {
    position: relative;
    width: 100%;
    height: 100%;
}

.logo-left {
    position: relative;
    top: 10px;
    left: 10px;
    width: 50%;
    height: 50%;
}

.logo-bottom {
    position: relative;
    display: grid;
    justify-content: center;
    transform: scale(0.5);
}

.center-container {
    position: relative;
    padding-top: 17%;
}

.login-container, .source-container {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.loading-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100px;
}

.spinner {
    border: 4px solid rgba(0, 0, 0, 0.1);
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border-left-color: #09f;
    animation: spin 1s ease infinite;
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}

.login-container input, .source-container input {
    margin: 10px;
    padding: 10px;
    width: 200px;
}

button {
    padding: 10px 20px;
    cursor: pointer;
}

.error {
    color: red;
    margin-top: 10px;
}
```

### Step 3: Update `app.js` to handle login failures

1. **Update `app.js` to manage the error state:**

```javascript
// src/HiTrustHandler/app/static/js/app.js
new Vue({
    el: '#app',
    data: {
        username: '',
        password: '',
        source: '',
        loggedIn: false,
        loading: false,
        errorMessage: ''
    },
    methods: {
        login() {
            this.loading = true;
            this.errorMessage = '';
            fetch('/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username: this.username, password: this.password })
            })
            .then(response => response.json())
            .then(data => {
                this.loading = false;
                if (data.status === 'success') {
                    this.loggedIn = true;
                } else {
                    this.errorMessage = 'Login failed. Please check your username and password.';
                }
            })
            .catch(() => {
                this.loading = false;
                this.errorMessage = 'An error occurred. Please try again.';
            });
        },
        submitSource() {
            fetch('/submit_source', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ source: this.source })
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    alert('Source submitted successfully');
                } else {
                    alert('Source submission failed');
                }
            })
            .catch(() => {
                alert('An error occurred');
            });
        }
    }
});
```

With these changes, if the user enters the wrong password or if there's an error during the login process, the loading spinner will disappear, and the input boxes will be shown again with an error message indicating what went wrong. This allows the user to correct their input and try to log in again.