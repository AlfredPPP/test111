BSD（业务规格说明）报告

	下文是一份基于现有 mtp.py 脚本和辅助 Excel（Fund Calculate.xlsx 等）所体现业务逻辑与功能的业务规格说明（BSD）示例。由于目标是重构该脚本，去除原有 VBS+Excel 宏混合开发方式，改为 Python + PySide2 + SQLite 的新框架，因此本报告会在介绍业务需求和原功能的基础上，给出新的功能模块划分与接口说明，供后续开发和扩展使用。

1. 引言（Introduction）

1.1 背景
	•	每月税务计提（Monthly Tax Provision，MTP）：基金或资产管理公司需在每月或季度末，对不同基金的应税收入、扣除项、资本利得、投资收益等数据做出统计、调整并计算当期 Tax Provision。
	•	业务协作角色：
	•	Preparer：主要负责基础数据收集和财务规则计算，包括可能的手工修正（adjustment）。
	•	Reviewer：审阅 Preparer 的结果，确认是否符合监管、财务政策及客户方的特殊需求。
	•	系统目标：以自动对比平台中已提交的 Tax Provision 数据与用户提供的原始文件数据，并输出差异报告，同时容许 Preparer/Reviewer 就每条差异填写 comment，方便后续追溯与审计。
	•	重构动机：当前脚本由 Python + VBA + Excel 宏混合实现，耦合度高且调试不便；为提升维护性和扩展性，拟将技术栈转向 Python + PySide2（UI） + SQLite（数据库），同时保持和扩展既有功能。

1.2 读者范围
	•	本文档主要面向项目实施人员、开发人员和测试团队，帮助其理解此项目的业务需求、功能范围以及技术要点。

2. 业务需求（Business Requirements）

2.1 核心需求概述
	1.	数据整合与对比
	•	系统应加载来自网络平台上下载的月度税务计算报告（MTP），同时汇入多份用户在 Excel、PDF、CSV 等原始文件中提供的数据。
	•	对应各基金、各科目、各类型收入与费用及资本利得/损失进行匹配比对；如有差异，应在报告中列出。
	2.	差异处理与评论（Comments）
	•	若系统发现差异，则在差异清单中列出并让用户（Preparer 或 Reviewer）填写评论（说明差异原因或调整理由）。
	•	评论的记录应能够保存并与后续版本的 MTP 对比相衔接。
	3.	用户角色与权限
	•	Preparer：可上传或录入数据，对差异添加或修改评论；可进行手动调整操作；可再次运行检查脚本。
	•	Reviewer：可查看差异与 Preparer 的评论，提出进一步的审阅评论，决定差异是否可被接受或需要进一步修改。
	4.	自动化处理
	•	对特定类型的检查项，如 SWAP 文件、Investment Package 文件、Income Package 文件、NAV 等，系统应能够通过配置或脚本自动匹配其位置与关键字段，并将数据抓取至数据库中进行对比。
	•	对缺失或不匹配的文件、sheet、行或列等情况能给出提示或警告。
	5.	输出报告与查看
	•	系统应能输出一份合并汇总报告，用于查看各基金在各科目下的最终MTP数值、与原始文件计算的数值、差异值及评语。
	•	提供友好的 UI 界面（PySide2）以便多角色协同操作。

2.2 数据需求与存储
	1.	输入数据：
	•	来自网络平台导出的 MTP 报告文件（如 XLSX/CSV 等）。
	•	各类原始文件（收入、分红、资本利得/损失、SWAP、Pre TOFA、Tender Offer、PY MTP、PM MTP 等）。
	•	用户在差异表格上的手工评论与调整。
	2.	存储方式：
	•	使用 SQLite 替代当前的文本或 Excel 辅助储存。
	•	保存的信息包括：
	•	MTP 原始数据（按基金、科目/行项目、金额等）。
	•	原始文件数值（相同颗粒度下的基金、科目/行项目、金额等）。
	•	差异与评论（差异值、评论文本、评论时间、评论人、用户角色等）。
	•	Checkpoint 配置（各检查项对应该如何匹配行列、对应的 alias 规则等）。

2.3 UI 需求
	1.	文件上传/选择
	•	Preparer 登录后，可在 PySide2 界面选择/上传各源文件或配置路径（对应原来的输入 Excel 或路径）
	•	一旦文件加载成功，系统自动扫描并提取关键数值，存进数据库。
	2.	差异展示
	•	在 UI 中以列表/表格形式显示差异条目：包括基金、项目名称、MTP 数值、原始文件数值、差异、状态、评论等。
	3.	评论功能
	•	Preparer/Reviewer 均可对差异添加评论。Reviewer 能查看并追加意见，或标记差异状态。

3. 功能模块（重新设计）

下文基于原 mtp.py 中的各函数和类，结合业务逻辑，给出更合理的功能拆分与命名示例。此拆分已考虑采用 PySide2 进行界面开发、SQLite 进行存储，以及后续扩展的可维护性。

3.1 数据读取模块（Data Ingestion Layer）

新类/函数	主要职责	对应旧代码/备注
FileCollector	搜集用户指定的文件（MTP、SWAP、Income Package、Tender Offer、Pre TOFA 等），解析路径和名称。	原脚本中 source_ck() 函数及其相关的文件匹配逻辑；Excel 中对 p_pmpth/p_pypth/p_cmpth/... 的解析。
ExcelParser	解析 Excel 中的各 sheet（可根据配置/alias 来定位行列），将目标数值写入 SQLite。	原脚本中 open_source(), epdf(), alia_m(), ck_swap(), downld_mtp() 等与 Excel 打开和处理文件相关的功能。
PDFParser（可选）	解析 PDF 中的关键字段(若需要）	部分与 epdf() 函数逻辑对应
DatabaseManager	统一封装对 SQLite 的查询和写操作	原脚本使用文本方式或另写函数存储数据。现改用 SQLite。

3.2 比对与差异处理模块（Comparison & Validation Layer）

新类/函数	主要职责	对应旧代码/备注
DataComparer	核心比对逻辑：将数据库中 MTP 值对比原始文件值，计算差异并记录在差异表中。	对应 run() 中有关差异计算、match2(), match_s5u(), ck_manual_adj() 等部分功能。
CommentManager	处理差异评论（写、读、更新），并存储在 SQLite 中。	对应 upload_cmt(), savprivate(), submit() 等对差异评论的保存与提交逻辑。
CheckPointManager	维护检查点（checkpoint）的配置和启用/禁用等逻辑。	对应 refresh_assign(), parse_role(), ck_able(), select_all() 等功能。

3.3 用户交互与流程控制模块（UI & Workflow Layer）

新类/函数	主要职责	对应旧代码/备注
MainWindow (PySide2)	提供主界面：包括文件上传、表格查看差异、切换角色、查看/添加评论等操作。	原来 Excel 里 Home sheet/Login sheet 中的一些按钮功能 OnClick()。
LoginDialog (PySide2)	用户登录界面：输入账号（Preparer/Reviewer）及密码，控制角色权限。	对应 class cofig_act()，以及脚本中对 log_rol.Value 的处理逻辑。
ReviewDialog (PySide2)	展示已上传的 MTP 数据及评论，Reviewer 可进行评论或确认操作。	原脚本 reviewer 相关函数：rev_copy() 等。
PreparerWorkflow	处理 Preparer 角色常用操作逻辑，如“加载文件”、“保存/提交评论”、“重新比对”。	对应 class exe(), class submit(), ld_ldr.OnClick() 等部分。
ReviewerWorkflow	处理 Reviewer 角色常用操作：如“加载并查看差异”、“追加评论”、“导出审核报告”等。	对应 submit(), rev_copy(), ld_cmt() 部分。

3.4 日志与错误处理模块（Logging & Error Handling）
	•	统一使用 Python logging 库捕获关键错误，或提示用户处理异常（例如文件未找到、网络超时、Excel 行列匹配不到等）。
	•	对应旧脚本 try-except 大量散落在函数内部；新架构应集中管理异常处理，给予适当的 UI 提示。

4. 核心业务流程（示例）
	1.	Preparer 登录
	•	UI 显示“上传路径/文件选择” → Preparer 选择 MTP 报告与各原始文件 → 系统自动解析并写入 SQLite → 触发 DataComparer 进行比对。
	•	若存在差异 → UI 显示差异清单 → Preparer 填写评论并保存。
	2.	Reviewer 登录
	•	查看 Preparer 处理后的数据及评论 → 进一步补充或质疑评论 → 选择是否确认该差异。
	•	可选择导出最终核对结果（供外部审计或归档）。

5. 技术架构与实现要点（High-Level Technical Approach）

5.1 新的框架示意

[ PySide2 UI ] 
       |            
       v
[ Controller / Workflow Layer ]
       |
       v
[ Comparison & Validation Layer ]
       |
       v
[ Data Ingestion Layer ]  ---> [ SQLite Database ]
       |
       +---> File System (Excel, PDF, CSV)
       |
       +---> MTP Web Platform (API / Download)

5.2 关键实施细节
	1.	去 Excel 宏：所有与按钮、事件相关的点击逻辑改由 PySide2 的信号/槽函数管理；Excel 打开仅作数据源读取，不再保存宏。
	2.	去 VBS：脚本中大量对 Excel/VBA 的调用改为 Python 库（如 openpyxl 或 xlrd/xlwt/xlsxwriter）或专门的 PDF 库来解析原始文件。
	3.	SQLite 数据表设计：
	•	mtp_data：存储来自 Web 平台的 MTP 行项
	•	source_data：存储从原始文件提取的数值
	•	differences：存储差异（基金、科目、MTP 值、source 值、variance、状态等）
	•	comments：差异评论（差异ID、评论者、用户角色、评论文本、时间戳等）
	•	checkpoints：各检查点配置/alias
	4.	并发控制：若多用户并发编辑评论，可在 SQLite 层使用行级/事务锁或在上层进行锁机制或“最后编辑”时间戳判断。
	5.	灵活拓展：可在后续添加新的报表类型或新的资金/资产类型处理逻辑，只需在 Data Ingestion Layer 做适配或在 Comparison 层定义新的比对规则。

6. 安全与权限
	•	访问控制：Preparer/Reviewer 角色区分；若日后需要更细颗粒度权限可引入 RBAC（基于角色的访问控制）策略。
	•	数据安全：SQLite 数据库应定期备份，并可考虑数据加密（根据企业合规需求）。

7. 交付与里程碑
	1.	第一阶段：完成现有功能的迁移与测试（剥离 VBS/Excel 宏、替换为 PySide2 + SQLite）；与 Preparer、Reviewer 用户一起确认核心功能是否可用。
	2.	第二阶段：根据实际需求进行扩展，如多语言支持、自动发送审阅结果、对接更多外部系统等。

8. 附录
	•	参考表格/Sheet 映射：详见本报告附录的各“mm4”“mm5”“ckalia”“pdfalia”等。
	•	Alias 与关键字配置：详见原 ckalia、alias 区域说明。
	•	术语解释：
	•	“TOFA” 指 Taxation of Financial Arrangements，澳大利亚税法相关概念。
	•	“Pre TOFA / Post TOFA” 即基于不同日期的税务安排处理方式。
	•	“SWAP” 指掉期交易相关文件。
	•	“Tender Offer” 指投标要约文件或类似资金操作。
	•	“MTP” 指 Monthly Tax Provision 报告。

结束语

以上 BSD 报告简要勾勒了本项目所有必须满足的业务需求和功能要点，并对旧代码各部分功能在新架构中的位置与命名作出示例性安排。
后续若有补充或调整，可在此文档基础上增补更详细的业务规则、数据表结构、接口定义以及测试方案等。通过该重构，项目可摆脱对 Excel VBA 的过度依赖，提升稳定性和可维护性，满足税务计提业务不断迭代发展的需求。