To implement the logging functionality across your project and make the logs accessible through a "Log" button in the frontend, you'll need to follow these steps:

### Step 1: Set Up Centralized Logging

We'll create a centralized logging setup that can be used across all Python files in your project.

1. **Create a `logger.py` file in a common directory (e.g., `src/HiTrustHandler/utils/logger.py`)**:

```python
import logging
import os

# Define log file path
log_file_path = os.path.join(os.path.dirname(__file__), '..', 'logs', 'app.log')

# Create logs directory if it doesn't exist
os.makedirs(os.path.dirname(log_file_path), exist_ok=True)

# Configure the logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file_path),
        logging.StreamHandler()  # This will also output to the terminal
    ]
)

# Get a logger instance
logger = logging.getLogger('HiTrustHandlerLogger')

# Example of adding a traceback to log exception with line number
def log_exception(exc):
    logger.error("Exception occurred", exc_info=exc)

# Log file path (for Flask to serve)
def get_log_file_path():
    return log_file_path
```

### Step 2: Use the Logger Across Your Project

In each of your Python files where you want to log information, you can use the logger like this:

```python
from .utils.logger import logger, log_exception

def some_function():
    try:
        # Your code here
        logger.info("Function executed successfully")
    except Exception as e:
        log_exception(e)
```

This setup ensures that all logs from various parts of your project are written to the same `app.log` file.

### Step 3: Serve the Log File in Flask

Create a new Flask route that serves the log file so it can be accessed when the "Log" button is clicked.

1. **Add a route in `main.py` to serve the log file:**

```python
from flask import send_file
from .utils.logger import get_log_file_path

@app.route('/get_log')
def get_log():
    log_file_path = get_log_file_path()
    return send_file(log_file_path, as_attachment=False)
```

### Step 4: Add the "Log" Button to Your HTML

Add a "Log" button to the HTML, which will make an HTTP request to the Flask route to fetch the log file and display it in a new tab.

1. **Update `index.html` to include the "Log" button:**

```html
<!-- Add the Log button at the right-up corner -->
<div id="app">
    <div class="background">
        <div class="right-up-corner">
            <button @click="viewLog">View Log</button>
        </div>
        <!-- Other HTML content here... -->
    </div>
</div>
```

2. **Update the CSS to position the button:**

```css
/* src/HiTrustHandler/app/static/css/styles.css */
.right-up-corner {
    position: absolute;
    top: 10px;
    right: 10px;
}

.right-up-corner button {
    padding: 10px;
    cursor: pointer;
}
```

3. **Add the JavaScript method to handle the button click in `app.js`:**

```javascript
// src/HiTrustHandler/app/static/js/app.js
new Vue({
    el: '#app',
    data: {
        // Existing data properties...
    },
    methods: {
        // Existing methods...

        viewLog() {
            window.open('/get_log', '_blank');
        }
    }
});
```

### Step 5: Ensure the Log Directory Exists

Make sure that the log directory is created before any logging happens. The `logger.py` code already handles this by creating the directory if it doesn't exist:

```python
os.makedirs(os.path.dirname(log_file_path), exist_ok=True)
```

### Summary

With these steps:

- You have a centralized logging system where all logs, including exceptions with specific line numbers, are recorded in a single log file (`app.log`).
- You have added a "Log" button to your HTML, which, when clicked, opens the log file in a new browser tab.
- This log file is served by a Flask route, ensuring that it's accessible via the web interface.

This setup will help you monitor the application, troubleshoot issues, and keep a consistent log across all parts of your project.