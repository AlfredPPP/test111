以下是一份示例的 BSD（Business / System / Design）报告，基于现有 MTP 业务逻辑与功能，但摒弃原有的 VBA + Excel 框架，转而在数据库层使用 SQLite，界面采用 PySide2 进行重新设计。报告结构涵盖关键业务需求、系统架构、数据库方案、以及函数与模块重构示例。您可在此基础上自行补充更深入的细节。

1. 项目背景与目标（Business）

1.1 背景概述
	•	项目名称：Monthly Tax Provision（MTP）自动化工具
	•	业务背景：在金融机构的基金会计与税务合规场景中，需要定期计算并记录各基金的月度税务计提数据。
	•	痛点与动因：
	1.	传统方式需人工在Excel中比对多个报表，费时费力且易出错；
	2.	Preparer/Reviewer协同时缺乏统一、可追溯的comment管理；
	3.	之前通过VBA宏+Excel，调试和扩展不便；无法满足后期更多基金或更复杂税务规则需求。

1.2 项目目标
	1.	数据自动化获取与验证：从网络平台下载各类MTP报表、TIR报告等文件，校验其正确性和时效性；
	2.	差异分析与Comment管理：对比本地原始财务数据与网络平台上的报表，形成差异清单并允许用户添加说明；
	3.	协同与审计追踪：支持Preparer与Reviewer的分级权限，以及Checklist与comment存档；
	4.	弃用旧式VBA+Excel：采用更可扩展的架构（PySide2界面 + SQLite数据库），实现后续灵活升级。

2. 系统需求（System Requirements）

2.1 业务需求
	1.	自动下载MTP与TIR数据
	•	根据基金ID、报告日期等参数自动登陆远程平台并下载；
	•	校验关键文件的完整性（SWAP文件、Tax Investment Package等）。
	2.	原始数据对比与差异显示
	•	解析本地上传的各种财务Excel/CSV/PDF等文件，对比与MTP报表结果；
	•	对每个差异项，允许Preparer/Reviewer分别添加comment或做调整。
	3.	角色权限与审核流程
	•	Preparer可编辑comment及数据调整；Reviewer仅查看并补充二次注释；
	•	提供Checklist签名流程，依次由Preparer、1st Reviewer、2nd Reviewer完成。
	4.	支持补充调整（Manual Adj.）
	•	专门针对 “S4 Dividend IP Recon”、“S5 Unbalance Fund” 等特殊检查点；
	•	对CM/PM MTP间的差异进行手动调整记录，并保存到数据库。
	5.	TIR 报告校验
	•	判断下载的CGT或Tax Investment Package文件版本是否最新，如落后则提示。
	6.	Item Code 模板管理
	•	维护MAN开头的Item Code及其映射关系，后续可自动化生成或更新。
	7.	报表导出
	•	生成Reviewer使用的对比报表；
	•	在界面中对差异项进行可视化并可一键导出PDF/Excel备份（后续扩展）。

2.2 非功能性需求
	•	系统可维护性：采用Python + PySide2 + SQLite，易读易扩展；
	•	数据一致性：采用SQLite数据库集中存储comment、差异结果、用户签名等；
	•	安全合规：对敏感数据（如登录密码）做好加密或令牌化；
	•	可审计：差异与comment历史均须保留追溯记录。

3. 总体架构（High-level System Architecture）

为摆脱Excel + VBA依赖，系统采用三层结构：

┌────────────────────┐        ┌──────────────────────────┐
│   PySide2 UI/UX    │        │   External Repositories  │
│ (Preparer/Reviewer)│  <---->│  (Remote MTP, TIR, etc.) │
└─────────▲──────────┘        └──────────┬───────────────┘
          │                               │
          │ (MQ / REST / DB Calls)        │
┌─────────┴──────────┐                    │
│   Controller/Logic │ <----------------─┘(自动下载/检查)
│ (Python Modules)   │
└─────────▲──────────┘
          │ (SQL)     
┌─────────┴──────────┐
│    SQLite DB        │
│  (Data Access Layer)│
└─────────────────────┘

	1.	UI层（PySide2）
	•	提供桌面客户端界面（Multi-Tab或多窗体），给Preparer/Reviewer不同权限入口；
	•	数据展示、差异比对可视化及comment输入。
	2.	逻辑层（Controllers）
	•	下载模块：处理从远程平台获取MTP/TIR文件、检查路径和时间戳；
	•	对比模块：将本地文件或数据库中的数值与MTP对比，输出差异；
	•	comment管理：接受用户输入comment后写入数据库；
	•	Checklist签名：更新数据库中Checklist与签名信息。
	3.	数据层（SQLite）
	•	存储基金信息、角色权限表、差异结果、comment表、Item Code映射、SWAP记录等；
	•	与Python通过ORM或原生SQL交互；
	•	替代原先的文本文件/lzma方式。

4. 模块与函数设计（Design & Function Refactoring）

下表展示了原mtp.py中核心功能及新的命名与模块拆分示例。除功能说明外，还给出可能的数据库读写点；后续可根据团队编码规范再行优化。

原脚本功能	新设计(示例)	功能/说明	备注
run()	controller.main_process()	系统主入口：检查路径/日期参数 -> 下载必要文件 -> 调用对比 -> 生成差异	PySide2中可绑一个“Run MTP”按钮
source_ck()	file_manager.validate_source_files()	校验本地文件夹路径和文件存在性，并返回缺失列表	写日志或返回错误给UI提示
open_source()	file_parser.parse_local_files()	解析本地Excel/PDF/CSV等财务数据，准备对比	结果入库 or 缓存
upload_cmt() / savprivate()	comment_manager.save_comments()	用户填写差异comment后保存到SQLite表 comments 中	同时记日志，更新timestamp
ld_data(rol)	comment_manager.load_data_by_role()	加载指定角色相关的数据与评论	读取SQLite
dl_mtp()	remote_fetcher.download_mtp()	从MYRTS下载CM/PM MTP报表到本地	亦可放到定时或手动操作
tir_rec_rv()	remote_fetcher.check_tir_report()	验证TIR文件版本是否最新	读取服务器信息 + 对比文件时间
ck_manual_adj()	manual_adj.load_manual_adjustments()	读取/写入“Manual adj check” -> 处理S4/S5对比	数据落SQLite
takeover() / asign_cfm()	assignment_manager.takeover_checkpoints()	接管checkpoint权限，修改数据库中的分配关系	关联 users, funds, checkpoints
movement()	timing_diff.analyze_s4_s5()	针对S4/S5 Timing Movement执行算例	结果存数据库
s4_update()	manual_adj.update_s4_dividend()	S4 Dividend IP Recon相关手动更新	写入数据库
rev_copy()	report_exporter.export_review_report()	导出Reviewer查看的带评论报告	未来可改为PDF/Excel多格式
…	…	…	…

4.1 主要数据库表示例
	•	funds：基金ID、名称、clientID、基金类型、所属管理人等；
	•	user：用户ID、角色（Preparer/Reviewer）、姓名、密码hash等；
	•	checkpoints：各MTP checkpoint（S4 Dividend, S5 Unbalance等）及其相关分配；
	•	comments：commentID, checkpointID, fundID, 用户ID, 评论内容, 时间戳；
	•	item_codes：Item Code（MANxxx）与其描述、所属section等；
	•	differences：存储对比结果，一行代表某“指标”在本地文件与MTP报表的差异值、状态等；
	•	checklist_sign：Checklist行项、Preparer签名、1st Reviewer签名、2nd Reviewer签名等字段。

4.2 PySide2界面交互示例
	1.	登录窗口：输入用户名/密码 -> 验证 -> 进入主界面
	2.	主界面：
	•	标签页或树状菜单：
	•	“数据下载” -> 触发 download_mtp()
	•	“差异比对” -> 触发 main_process() 并在UI上显示结果
	•	“手动调整”-> 加载Manual Adjust data表单
	•	“Checklist” -> 预览并签名
	•	“报告导出” -> 选定某个Fund，点击导出
	3.	评论面板：针对差异项弹出对话框输入comment -> save_comments()
	4.	S4/S5 Timing Movement：单独界面或对话框进行S4/S5特定操作，写库后刷新界面。

5. 工作流程（Workflow）

Preparer场景：
	1.	在PySide2登录；
	2.	选择基金/日期 -> 下载MTP -> 若缺SWAP等文件则提示；
	3.	程序自动对比并输出差异 -> 用户在UI中查看差异项、填写comment；
	4.	可进行Manual Adjustment、S4 Dividend Recon、S5 Unbalance检查等操作；
	5.	全部完成后点击“提交” -> 数据写入SQLite -> 状态更新为“待Reviewer审核”。

Reviewer场景：
	1.	登录后打开“差异审核”界面；
	2.	查看Preparer所做差异、comment；必要时写入二次comment；
	3.	完成Checklist签名 -> 最终提交，更新状态；
	4.	可一键导出报告或归档。

6. 关键技术要点（Implementation Highlights）
	1.	PySide2：使用Python的Qt绑定进行界面开发，封装数据绑定与事件处理；
	2.	SQLite：通过 sqlite3 或者SQLAlchemy等ORM操作数据库，替代原先散落的txt / xlsx / lzma方式；
	3.	远程文件下载：使用requests库（或httpx）实现，与MYRTS系统交互时注意session、证书等；
	4.	文件解析：Excel可用 openpyxl / xlrd；PDF可用 pdfplumber / PyPDF2；CSV原生处理；
	5.	差异匹配：支持别名/正则，如pdfalia、ckalia映射等，对行名或字段有变化的情况进行兼容；
	6.	审计与版本：可选在comments表中记录每次更新的用户ID和timestamp；
	7.	扩展：系统可自由新增基金、指标，或衍生新的报表映射逻辑。

7. 未来扩展（Next Steps）
	•	多维度审计：对每个差异项的历史修改记录都存于 differences_history，并在UI可回溯；
	•	自动调度：在服务器端定时执行下载及初步比对，生成每日差异快照；
	•	高级可视化：用图表或仪表盘展示税务计提整体趋势、各基金状态；
	•	兼容更多文件格式：如更多CSV报表、兼容其他资金管理平台；
	•	安全性提升：引入OAuth或更高安全级别，替代简单的用户名/密码登录流程。

8. 结论

通过将旧有的VBA+Excel脚本（mtp.py）迁移到PySide2 + SQLite的全新框架，我们在保留原业务逻辑的前提下，获得了如下收益：
	1.	调试与维护更简洁：Python主控代码更清晰，SQLite集中存储评论和差异数据；
	2.	功能可扩展：可轻松新增字段、报表或输出格式；
	3.	用户体验改进：PySide2提供更灵活的GUI，对比、comment与签名流程可更直观；
	4.	审计与版本化：数据库层面可记录完整数据修改轨迹，便于财务审计和长期合规。

	备注：本报告仅为示例性BSD文档结构，部分术语或实现可根据实际情况调整。建议在项目细节阶段再补充数据表字段设计、API接口定义、UI原型图等更具体内容。