import os
import sqlite3
import requests

class TemplateDBUpdater:
    def __init__(self, db_path, base_url):
        self.db_path = db_path
        self.base_url = base_url.rstrip('/')  # Remove trailing slash if present
        self.conn = sqlite3.connect(self.db_path)
        self.cursor = self.conn.cursor()
        self._create_table_if_not_exists()

    def _create_table_if_not_exists(self):
        create_table_sql = '''
        CREATE TABLE IF NOT EXISTS template (
            template_id TEXT NOT NULL,
            template_name TEXT NOT NULL UNIQUE,
            family_id INTEGER,
            family_name TEXT
        )
        '''
        self.cursor.execute(create_table_sql)
        self.conn.commit()

    def update(self):
        try:
            # Step 1: 获取所有 family 信息
            family_url = f"{self.base_url}/families"
            family_response = requests.get(family_url)
            family_response.raise_for_status()
            family_list = family_response.json()

            for family in family_list:
                family_id = family.get('id')
                family_name = family.get('name')

                # Step 2: 获取该 family 下的所有 template
                template_url = f"{self.base_url}/templates?family_id={family_id}"
                template_response = requests.get(template_url)
                template_response.raise_for_status()
                templates = template_response.json()

                # Step 3: 更新数据库
                for tmpl in templates:
                    template_id = tmpl.get('id')
                    template_name = tmpl.get('name')

                    try:
                        self.cursor.execute('''
                            INSERT INTO template (template_id, template_name, family_id, family_name)
                            VALUES (?, ?, ?, ?)
                            ON CONFLICT(template_name) DO UPDATE SET
                                template_id=excluded.template_id,
                                family_id=excluded.family_id,
                                family_name=excluded.family_name
                        ''', (template_id, template_name, family_id, family_name))
                    except sqlite3.Error as e:
                        print(f"SQLite error for template '{template_name}': {e}")

            self.conn.commit()
            print("Database update completed successfully.")

        except requests.RequestException as e:
            print(f"Request error: {e}")
        except Exception as e:
            print(f"Unexpected error: {e}")

    def close(self):
        self.conn.close()