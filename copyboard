下面是一份**产品需求文档（PRD）**示例，基于你整理的业务需求和对 mtp.py 脚本及其所调用的 Excel/脚本逻辑的分析编写而成。文档将用更合理的功能划分和命名方式呈现，同时建议改用 Python + PySide2 + SQLite 的技术栈，以取代原先的 “Python + VBA + Excel宏” 的混合实现。由于原代码中的函数命名和功能划分较为混乱，这里会以更加清晰的结构进行重新设计和描述。

产品需求文档（PRD）

1. 项目背景与目的

1.1 背景

当前的月度税务（Monthly Tax Provision，简称 MTP）核对流程，主要包括以下步骤：
	1.	Preparer（准备人） 根据客户提供的各类原始数据（如 TIR / CGT-TIR / SWAP / NAV / Investment Package 等）进行计算，并在内部系统（如 MYRTS、DMH）中填入月度税务（MTP）数据。
	2.	Preparer 通过一个由 Python 和 VBA/Excel 混合实现的脚本（mtp.py + Fund Calculate.xlsx 模板）进行核对：
	•	从内部系统下载 MTP 报表文件
	•	从本地或网络文件夹中读取用户指定的原始文件（Excel、PDF 等）
	•	在程序界面（原先是Excel VBA）对比、展示差异，并要求使用者填写差异备注（comments/notes）
	•	将这些差异及用户评论存储在内部或本地数据库（现阶段可能是一系列文本/压缩文件）的形式
	3.	Reviewer（复核人） 再次审阅差异、检查计算、并可进行二次评论（包括 <send back> 标记表示退回给 Preparer）
	4.	（可选） 在特定 Checkpoint（如 S4 Dividend IP Recon）界面上允许修改 MTP 数值并更新回内部系统

原实现采用大量 VBA Excel 宏、VBScript，以及不规范的 Python 代码进行混合开发，维护和扩展性不佳，debug 较为困难。且需要频繁在不同文件与系统之间切换，用户体验不够友好。

1.2 目标

本项目的目标是：
	•	重新整理该脚本的功能需求，清晰划分业务与技术层的职责。
	•	用 Python + PySide2 替代 Excel/VBA 作为主要的 UI 展示平台，用 SQLite 替代现有的零散文本/Excel/自带数据库方案。
	•	提高可维护性，并优化用户操作体验，确保 Preparer 与 Reviewer 都能流畅完成 MTP 对比、差异评论、审核、签名、导出等任务。

2. 业务需求

	以下业务需求主要基于你给出的整理，结合 mtp.py 及其所调用的 Excel 模板所实现的功能，进行重新概括与归纳。

2.1 核心业务概念
	1.	MTP（Monthly Tax Provision）
指一个基金在某个截止日（As of date）下的月度税务报表，包括当前月、前月、当年、前年度等多种统计口径（CM/PM、CY/PY）。
	2.	核查对象
通常由 Fund code + As of date 唯一标识，表示要进行核对的一份 MTP 数据。
	3.	Preparer
	•	角色：准备人
	•	主要职责：汇总各类原始数据并计算出初步的 MTP 数据，上传至内部系统，对比差异并填写差异原因。
	4.	Reviewer
	•	角色：复核人
	•	主要职责：审阅 Preparer 的差异结果和评论，对不合理的地方可 <send back>，或确认并留下二次评论。
	5.	Adjustment
	•	人工在数据计算基础上，根据金融规则、客户要求等，进行额外调整。
	6.	Checkpoint
	•	核对过程的分项检查点。例如 S4 Dividend IP Recon、S5 Unbalance Fund 等。
	•	每个 checkpoint 都有对应的数据表/差异明细，用于对比内部系统下载的数值和原始文件计算值。

2.2 数据整合与对比需求
	1.	下载 MTP 报表
	•	从内部系统（MYRTS、DMH 等）下载某个核查对象（Fund code + As of date）的 MTP 文件。
	•	可能包含多个时间版本（Current Month、Prior Month）。
	2.	读取原始文件
	•	用户本地或局域网指定地址（手动输入路径或在 UI 中选择）中包含多种文件：Excel、PDF、Swap、TIR 等。
	•	需要解析这些文件以计算出“应得”或“应计”的 MTP 数据。
	3.	多维度对比
	•	对照内部系统下载的 MTP 与原始文件所计算出的值，进行多维度的 checkpoint 核对。
	•	产生差异报表：Summary（汇总）和 Detail（明细）。
	4.	差异处理与评论
	•	在 Summary 页面记录总差异，允许用户添加 Notes。
	•	在 Detail 页面针对每个 checkpoint 具体差异行添加 comment。
	•	允许 <send back> 等特殊标记，以便 Reviewer 将问题退回给 Preparer。
	5.	特定 checkpoint 的数据编辑
	•	如 S4 Dividend IP Recon，允许在对比界面直接修改内部系统下载的 MTP 值并回传更新。

2.3 差异评论与历史记录需求
	1.	评论与笔记
	•	Preparer 在差异处写明原因（调整理由、数据来源不一致等）。
	•	Reviewer 可二次补充或直接 <send back>。
	2.	历史记录统计
	•	在程序主界面可查看各基金历史核查情况。
	•	统计哪些项目最常出现差异、哪些用户最常填错等。
	3.	Checklist 文件签名
	•	在一个 Checklist 界面中，Preparer、1st Reviewer、2nd Reviewer 分别进行签名。
	•	导出 Checklist 签名文件并储存到局域网指定位置。

2.4 数据存储需求
	1.	本地储存
	•	用户各内部系统的密码（可选择“记住密码”）。
	•	“运行规则表”（checkpoint 配置、对比规则等）可在程序启动时从局域网同步到本地。
	2.	局域网储存（SQLite）
	1.	运行记录表
	•	字段示例：

(fund_code, as_of_date, checkpoint, internal_value, source_value,
 preparer_comment, reviewer_comment, update_time, update_user, is_valid)


	•	当添加 notes 时，可为空的字段（checkpoint, internal_value, source_value）。
	•	每条 comment 在存入时需追加“时间+用户名”标记。

	2.	运行规则表
	•	字段示例：

(checkpoint, file_type, rule_pattern, comment, update_time, update_user, is_valid)


	3.	Checklist 文件记录表
	•	存储 Checklist 的签名文件信息：

(ID, fund_code, as_of_date, file_path, md5, update_time, update_user)


	•	只新增记录不更新。

2.5 UI 需求
	1.	登陆界面
	•	支持选择角色（Preparer / 1st Reviewer / 2nd Reviewer），选择内部系统平台，输入账号密码后登陆。
	•	“记住密码” 选项；“skip” 按钮可跳过输入密码仅用于浏览历史数据。
	2.	主界面 - Home
	•	显示历史核查对象的差异情况统计及用户失误统计。
	3.	主界面 - Review Tab
	•	选择 Fund code + As of date。
	•	选择要执行的 checkpoints。
	•	输入原始文件路径。
	•	点击“Review”后开始下载 MTP、加载文件并对比，生成差异 Summary。
	•	在 Summary 可添加 notes，也可勾选指定 checkpoint 导出差异报告（xlsx 或 PDF）。
	•	点击对应 checkpoint 进入 Detail 界面。
	4.	主界面 - Detail Tab
	•	展示该 checkpoint 的明细差异：
	•	内部系统值、原始文件计算值、manual adjustment 值、差异值、各种评论。
	•	如果是 S4 Dividend IP Recon，可允许直接在此修改 MTP 值并回传。
	5.	主界面 - Checklist Tab
	•	以 checklist.xlsx 文件模板为界面，用户可对每一项进行检查并签名。
	•	可点击“Save”保存签名到数据库并导出相应文件。

3. 现有 mtp.py 脚本主要功能概述

根据提供的 mtp.py 以及其引用的 Excel Sheet 内容分析，目前脚本大致完成了以下功能（概括）：
	1.	登录与凭证管理
	•	脚本中有 login 相关逻辑（post 请求到 https://.../StandardEDir.fcc），在登陆后存储会话（rts_session）。
	2.	下载 MTP 报表
	•	dl_mtp() 函数：从内部系统下载指定 fund_code、as_of_date 的 MTP 文件，并保存到本地。
	3.	调用 Excel 模板
	•	通过 win32com.client 打开/读取 Fund Calculate.xlsx
	•	不同 sheet（Income Package, Tax Investment Package, SWAP 等）中存放了映射、宏或比较逻辑。
	•	运行宏或者在 Python 中操作 Worksheet，自动比对特定单元格，找出差异。
	4.	解析本地或网络文件
	•	包含Excel、PDF、CSV (Swap)、TIR文件等，通过特定匹配方式获取数值。
	•	例如：epdf() 函数使用 pdfplumber 读取 PDF 内容再进行正则匹配；ck_swap() 打开一系列 Swap 文件并在指定单元格进行运算等。
	5.	差异生成和评论
	•	生成 Summary / Detail，预留单元格供 Preparer / Reviewer 输入评论。
	•	<send back> 机制标记退回。
	6.	部分 checkpoint 特殊逻辑
	•	S4 Dividend IP Recon：可修改下载的 MTP 值并回传。
	•	S5 Unbalance Fund：对 PM MTP 中的某些差异进行校验，若超出一定阈值则记为不平衡等。
	7.	保存数据与导出
	•	脚本会将评论写入到 LZMA 压缩后的文本文件，命名方式如 o + fund_code + as_of_date + user。
	•	在 Excel 中也提供 “Export” 按钮导出 xlsx 报告或 checklist 文件。
	8.	Checklist 签名与多角色
	•	cksubmit() 等函数实现了在 Excel 里签名保存，以及一系列滚动事件、保护单元格等（VBA 逻辑）。

4. 新系统的设计与需求实现

为舍弃 VBA + Excel 的外壳，改用 Python + PySide2 + SQLite，需要对原脚本功能进行重构。以下是建议的新的功能模块和对应的函数命名及说明。

4.1 模块化设计
	1.	UI 层（PySide2）
	•	LoginWindow：负责用户登录与角色选择
	•	MainWindow：主界面，包含若干 Tab：
	•	HomeTab（历史统计）
	•	ReviewTab（核对与差异 Summary）
	•	DetailTab（各 checkpoint 的详细数据表）
	•	ChecklistTab（检查清单、签名）
	2.	Business Logic 层
	•	MTPDownloader：负责与内部系统交互，下载 MTP 或 S4/S5 等报表
	•	FileParser：负责解析用户指定的 Excel/PDF/CSV/TIR 等原始文件
	•	例如 PDFParser.parse_dividends(), ExcelParser.parse_swap()
	•	Checker：进行多维度对比的核心逻辑
	•	Checker.compare_values(internal_values, source_values, checkpoint_rules)
	•	CommentsManager：管理差异结果及评论
	•	负责生成 Summary/Detail 差异结构，并保存/更新数据库中的评论
	3.	Data Access 层（SQLite）
	•	models.py：定义表结构及访问方法
	•	RunRecord, RunRule, ChecklistRecord 等
	•	DatabaseHelper：通用的 CRUD 操作
	•	包括对 preparer_comment, reviewer_comment, notes, timestamp 的增、改、查
	4.	Core Utility
	•	SessionManager：维护登录状态，会话 rts_session
	•	ConfigLoader：加载/解析 running rules、读取/写入配置
	•	Logging & Exception Handling：记录报错堆栈，提示用户

4.2 功能点与新的函数命名示例

以下为部分主要功能和对应的函数说明（示例）：
	1.	登录相关
	•	SessionManager.login(username, password, role)
	•	发起 requests 到内部系统的登录接口，获取 session cookie 并存储。
	•	SessionManager.remember_password()
	•	将密码加密后存储在用户本地。
	2.	MTP 报表下载
	•	MTPDownloader.fetch_mtp_report(fund_code, as_of_date, report_version)
	•	从 MYRTS 等系统接口拉取对应 MTP 报表文件并保存本地临时目录。
	3.	原始文件解析
	•	FileParser.parse_excel(file_path, checkpoint_rules)
	•	FileParser.parse_pdf(file_path, checkpoint_rules)
	•	FileParser.parse_swap(file_path, ...)
	4.	差异比对
	•	Checker.compare_checkpoint(internal_data, source_data, checkpoint_id)
	•	Checker.generate_summary_detail(...)
	•	处理某些特殊 checkpoint（如 S4 Dividend IP Recon），可在 Checker 中实现不同策略。
	5.	保存与加载差异结果、评论
	•	CommentsManager.save_comments(fund_code, as_of_date, checkpoint, comment_data)
	•	CommentsManager.load_comments(fund_code, as_of_date)
	•	同步到 SQLite，保持历史版本。
	6.	UI 交互
	•	ReviewTab
	•	on_select_fund(fund_code, as_of_date)：获取相关 MTP 并加载
	•	on_review()：执行全部 checkpoint 对比，显示 Summary
	•	DetailTab
	•	load_detail(checkpoint)：展示对应差异列表
	•	update_internal_value(row_id, new_value)：用于 S4 Dividend IP Recon 等特例
	•	ChecklistTab
	•	sign_checklist(role, username)：记录签名，存于 ChecklistRecord

5. 接口与数据结构

5.1 数据表（SQLite 示例）
	1.	run_records

CREATE TABLE run_records (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  fund_code TEXT,
  as_of_date TEXT,
  checkpoint TEXT,
  internal_value REAL,
  source_value REAL,
  preparer_comment TEXT,
  reviewer_comment TEXT,
  update_time DATETIME,
  update_user TEXT,
  is_valid INTEGER
);


	2.	run_rules

CREATE TABLE run_rules (
  checkpoint TEXT,
  file_type TEXT,
  rule_pattern TEXT,
  comment TEXT,
  update_time DATETIME,
  update_user TEXT,
  is_valid INTEGER
);


	3.	checklist_records

CREATE TABLE checklist_records (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  fund_code TEXT,
  as_of_date TEXT,
  file_path TEXT,
  md5 TEXT,
  update_time DATETIME,
  update_user TEXT
);



5.2 API / 函数调用顺序（示例）
	1.	用户登录
	•	UI -> SessionManager.login(...) -> (成功) -> MainWindow.show()
	2.	选择Fund & Date，加载
	•	UI: on_select_fund(...) -> MTPDownloader.fetch_mtp_report(...) -> FileParser.parse_xxx(...) -> Checker.compare_checkpoint(...) -> CommentsManager.load_comments(...) -> 显示界面
	3.	记录 / 提交 评论
	•	UI: user inputs comment -> CommentsManager.save_comments(...) -> update DB

6. 流程示意
	1.	Preparer 流程
	1.	登录系统
	2.	选择要核查的基金+日期
	3.	从内部系统自动下载 MTP（若未下载）
	4.	选定 checkpoints，指定原始文件路径
	5.	启动对比过程
	6.	在 Summary / Detail 中查看差异并填写 comment
	7.	生成并保存差异
	8.	（可选）在特定 checkpoint 界面更新 MTP 值并上传
	9.	填写 Checklist 并签名
	2.	Reviewer 流程
	1.	登录系统（选 1st Reviewer 或 2nd Reviewer）
	2.	加载 Preparer 已提交的数据和 comment
	3.	校验并添加二次评论，或 <send back>
	4.	也可签名 Checklist，并完成最终导出

7. 非功能性需求
	1.	可维护性
	•	整个系统仅用 Python + PySide2，减少对 VBA、VBScript 的依赖。
	•	代码结构清晰，各模块功能单一。
	2.	可扩展性
	•	以后若有新的检查点规则、或新的文件类型，只需在 FileParser 和 Checker 中添加即可。
	3.	安全性
	•	SQLite 数据库可设定用户访问权限，预防未经授权的更改。
	•	登录信息、密码等需加密存储。
	4.	性能
	•	在多数使用场景下，对比运算只需对数百至数千行数据，Python + SQLite 可满足性能需求。

8. 里程碑与交付
	1.	第一阶段：基础功能移植
	•	完成 UI 登陆、MTP 下载、基本对比、查看差异等。
	2.	第二阶段：评论与 Checklist 实现
	•	完成多角色评论、send back 机制，Checklist 签名与导出。
	3.	第三阶段：历史数据及统计
	•	提供 HomeTab 历史差异统计、用户失误统计等可视化功能。
	4.	第四阶段：上线与培训
	•	与现有流程做并行测试，确认准确性；
	•	培训 Preparer / Reviewer 上手新系统操作。

9. 结语

本 PRD 汇总了对现有 mtp.py + Excel 复杂实现进行重构的核心需求，旨在提升对 Monthly Tax Provision 数据的核对效率与可维护性。具体实现中，可针对每个子系统（下载/解析/对比/评论/UI等）进行更细化的设计与任务拆分，并逐步替换掉目前混杂的 VBA/Excel 宏脚本，改用 Python + PySide2 + SQLite 的解决方案，为未来功能拓展与维护提供更好的基础。

	备注：本文件仅为示例化的需求文档，实际项目中需与业务/技术团队进一步确认每个模块的优先级与细节，以便做更精准的开发排期和技术落地方案。