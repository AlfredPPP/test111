import xml.etree.ElementTree as ET
import pandas as pd


def parse_custom_xml_to_dataframe(xml_str):
    """Parses a custom-formatted XML string into a cleaned pandas DataFrame.

    The function extracts data from <row ... /> elements where each attribute
    represents a column and its value. It applies custom rules for renaming
    columns and cleaning values:
    
    Column name rules:
      - Remove the prefix '_P_' and suffix '-2'.
      - Replace underscores '_' with spaces.
      - If the resulting name is empty or contains 'HIDE', drop the column.

    Cell value rules:
      - Remove everything after (and including) the first '@' character.

    Args:
        xml_str (str): The XML content as a string.

    Returns:
        pd.DataFrame: A cleaned pandas DataFrame containing parsed values.
    
    Raises:
        xml.etree.ElementTree.ParseError: If the input XML string is invalid.
    """
    # Parse XML string
    root = ET.fromstring(xml_str)

    # Extract all <row> attributes as dictionaries
    raw_data = [row.attrib for row in root.findall(".//row")]

    # Create raw DataFrame
    df_raw = pd.DataFrame(raw_data)

    # Prepare for column renaming and filtering
    new_columns = {}
    columns_to_drop = []

    for col in df_raw.columns:
        if "HIDE" in col:
            columns_to_drop.append(col)
            continue

        # Clean column name
        cleaned_col = col.replace("_P_", "").replace("-2", "").replace("_", " ").strip()

        # Drop columns that become empty or only spaces
        if cleaned_col.strip() == "":
            columns_to_drop.append(col)
        else:
            new_columns[col] = cleaned_col

    # Drop unwanted columns and rename the rest
    df = df_raw.drop(columns=columns_to_drop).rename(columns=new_columns)

    # Clean cell values (remove anything after '@')
    df = df.applymap(lambda x: x.split("@")[0].strip() if isinstance(x, str) else x)

    return df